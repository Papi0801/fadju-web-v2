import emailjs from '@emailjs/browser';

// Configuration EmailJS
const EMAILJS_CONFIG = {
  SERVICE_ID: process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID || 'your_service_id',
  TEMPLATE_ID: process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID || 'your_template_id',
  PUBLIC_KEY: process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY || 'your_public_key',
};

// Initialiser EmailJS
emailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);

export interface EmailTemplate {
  to_email: string;
  to_name: string;
  from_name: string;
  subject: string;
  message: string;
  doctor_email?: string;
  doctor_password?: string;
  doctor_name?: string;
  etablissement_name?: string;
  login_url?: string;
  validation_status?: string;
  rejection_reason?: string;
  secretary_name?: string;
  superadmin_name?: string;
  dashboard_url?: string;
}

export class EmailService {
  /**
   * Envoie un email de bienvenue au m√©decin avec ses identifiants
   */
  static async sendWelcomeEmailToDoctor(params: {
    doctorEmail: string;
    doctorName: string;
    password: string;
    etablissementName: string;
  }): Promise<void> {
    const { doctorEmail, doctorName, password, etablissementName } = params;

    const templateParams: EmailTemplate = {
      to_email: doctorEmail,
      to_name: doctorName,
      from_name: '√âquipe Fadju',
      subject: 'Bienvenue sur la plateforme Fadju - Vos identifiants de connexion',
      message: `
Bonjour Dr. ${doctorName},

Votre compte m√©decin a √©t√© cr√©√© avec succ√®s sur la plateforme Fadju pour l'√©tablissement ${etablissementName}.

Vos identifiants de connexion :
- Email : ${doctorEmail}
- Mot de passe temporaire : ${password}

‚ö†Ô∏è IMPORTANT : Pour votre s√©curit√©, vous devrez changer ce mot de passe temporaire lors de votre premi√®re connexion.

Pour vous connecter :
1. Rendez-vous sur : ${window.location.origin}/auth/login
2. Utilisez vos identifiants ci-dessus
3. Suivez les instructions pour changer votre mot de passe

Une fois connect√©, vous pourrez :
- Consulter vos rendez-vous
- G√©rer vos patients
- Acc√©der √† votre planning

Si vous avez des questions, n'h√©sitez pas √† contacter votre secr√©taire sant√©.

Cordialement,
L'√©quipe Fadju
      `.trim(),
      doctor_email: doctorEmail,
      doctor_password: password,
      doctor_name: doctorName,
      etablissement_name: etablissementName,
      login_url: `${window.location.origin}/auth/login`,
    };

    try {
      const result = await emailjs.send(
        EMAILJS_CONFIG.SERVICE_ID,
        EMAILJS_CONFIG.TEMPLATE_ID,
        templateParams as any
      );

      if (result.status === 200) {
        console.log('Email de bienvenue envoy√© avec succ√®s');
      } else {
        throw new Error(`Erreur EmailJS: ${result.status}`);
      }
    } catch (error) {
      console.error('Erreur lors de l\'envoi de l\'email:', error);
      throw new Error('Impossible d\'envoyer l\'email de bienvenue');
    }
  }

  /**
   * Envoie un email de notification au secr√©taire
   */
  static async sendNotificationToSecretary(params: {
    secretaryEmail: string;
    secretaryName: string;
    doctorName: string;
    etablissementName: string;
  }): Promise<void> {
    const { secretaryEmail, secretaryName, doctorName, etablissementName } = params;

    const templateParams: EmailTemplate = {
      to_email: secretaryEmail,
      to_name: secretaryName,
      from_name: 'Syst√®me Fadju',
      subject: 'Nouveau m√©decin ajout√© √† votre √©tablissement',
      message: `
Bonjour ${secretaryName},

Le m√©decin Dr. ${doctorName} a √©t√© ajout√© avec succ√®s √† votre √©tablissement ${etablissementName}.

Le m√©decin a re√ßu ses identifiants de connexion par email et pourra se connecter d√®s maintenant.

Actions effectu√©es :
‚úÖ Compte m√©decin cr√©√©
‚úÖ Email de bienvenue envoy√©
‚úÖ Mot de passe temporaire g√©n√©r√©

Le m√©decin appara√Ætra dans votre liste des m√©decins et pourra commencer √† recevoir des rendez-vous via l'application mobile.

Cordialement,
Le syst√®me Fadju
      `.trim(),
      doctor_name: doctorName,
      etablissement_name: etablissementName,
    };

    try {
      await emailjs.send(
        EMAILJS_CONFIG.SERVICE_ID,
        EMAILJS_CONFIG.TEMPLATE_ID,
        templateParams as any
      );
      console.log('Email de notification envoy√© au secr√©taire');
    } catch (error) {
      console.error('Erreur lors de l\'envoi de la notification:', error);
      // Ne pas faire √©chouer la cr√©ation si l'email √©choue
    }
  }

  /**
   * Notifie le superadmin d'une nouvelle demande d'inscription
   */
  static async notifyAdminNewRequest(params: {
    adminEmail: string;
    adminName: string;
    secretaryName: string;
    etablissementName: string;
    etablissementType: string;
    etablissementVille: string;
    etablissementRegion: string;
  }): Promise<void> {
    const { adminEmail, adminName, secretaryName, etablissementName, etablissementType, etablissementVille, etablissementRegion } = params;

    const templateParams: EmailTemplate = {
      to_email: adminEmail,
      to_name: adminName,
      from_name: 'Syst√®me Fadju',
      subject: 'Nouvelle demande d\'inscription d\'√©tablissement de sant√©',
      message: `
Bonjour ${adminName},

Une nouvelle demande d'inscription a √©t√© soumise sur la plateforme Fadju.

D√©tails de la demande :
üìç √âtablissement : ${etablissementName}
üè• Type : ${etablissementType}
üìç Ville : ${etablissementVille}
üåç R√©gion : ${etablissementRegion}
üë§ Secr√©taire : ${secretaryName}

Actions requises :
1. Connectez-vous √† votre espace superadministrateur
2. V√©rifiez les informations de l'√©tablissement
3. Validez ou refusez la demande

‚è∞ Les demandes en attente n√©cessitent une validation dans un d√©lai de 48h.

Acc√©der au portail : ${window.location.origin}/superadmin

Cordialement,
Le syst√®me Fadju
      `.trim(),
      etablissement_name: etablissementName,
      secretary_name: secretaryName,
      dashboard_url: `${window.location.origin}/superadmin`,
    };

    try {
      await emailjs.send(
        EMAILJS_CONFIG.SERVICE_ID,
        EMAILJS_CONFIG.TEMPLATE_ID,
        templateParams as any
      );
      console.log('Notification admin envoy√©e avec succ√®s');
    } catch (error) {
      console.error('Erreur lors de l\'envoi de la notification admin:', error);
      throw new Error('Impossible d\'envoyer la notification au superadmin');
    }
  }

  /**
   * Notifie le secr√©taire que sa demande a √©t√© valid√©e
   */
  static async notifySecretaryApproval(params: {
    secretaryEmail: string;
    secretaryName: string;
    etablissementName: string;
    adminName?: string;
  }): Promise<void> {
    const { secretaryEmail, secretaryName, etablissementName, adminName = 'L\'√©quipe Fadju' } = params;

    const templateParams: EmailTemplate = {
      to_email: secretaryEmail,
      to_name: secretaryName,
      from_name: '√âquipe Fadju',
      subject: 'üéâ Votre √©tablissement a √©t√© valid√© !',
      message: `
F√©licitations ${secretaryName} !

Excellente nouvelle ! Votre √©tablissement "${etablissementName}" a √©t√© valid√© par notre √©quipe.

‚úÖ Validation effectu√©e par : ${adminName}
üìÖ Date de validation : ${new Date().toLocaleDateString('fr-FR', { 
  weekday: 'long', 
  year: 'numeric', 
  month: 'long', 
  day: 'numeric' 
})}

üéØ Vous pouvez maintenant :
‚Ä¢ Ajouter et g√©rer vos m√©decins
‚Ä¢ Recevoir des rendez-vous via l'application mobile
‚Ä¢ G√©rer les consultations de votre √©tablissement
‚Ä¢ Acc√©der √† toutes les fonctionnalit√©s de la plateforme

üöÄ Votre √©tablissement est d√©sormais visible sur l'application mobile Fadju et les patients peuvent prendre rendez-vous avec vos m√©decins.

Acc√©der √† votre dashboard : ${window.location.origin}/secretaire/dashboard

Prochaines √©tapes recommand√©es :
1. Ajoutez vos m√©decins dans la section "Gestion des m√©decins"
2. V√©rifiez les informations de votre √©tablissement
3. Configurez vos horaires et services

Bienvenue dans l'√©cosyst√®me Fadju !

L'√©quipe Fadju
      `.trim(),
      etablissement_name: etablissementName,
      secretary_name: secretaryName,
      validation_status: 'valid√©',
      dashboard_url: `${window.location.origin}/secretaire/dashboard`,
      superadmin_name: adminName,
    };

    try {
      await emailjs.send(
        EMAILJS_CONFIG.SERVICE_ID,
        EMAILJS_CONFIG.TEMPLATE_ID,
        templateParams as any
      );
      console.log('Email de validation envoy√© au secr√©taire');
    } catch (error) {
      console.error('Erreur lors de l\'envoi de l\'email de validation:', error);
      throw new Error('Impossible d\'envoyer l\'email de validation');
    }
  }

  /**
   * Notifie le secr√©taire que sa demande a √©t√© refus√©e
   */
  static async notifySecretaryRejection(params: {
    secretaryEmail: string;
    secretaryName: string;
    etablissementName: string;
    rejectionReason: string;
    adminName?: string;
  }): Promise<void> {
    const { secretaryEmail, secretaryName, etablissementName, rejectionReason, adminName = 'L\'√©quipe Fadju' } = params;

    const templateParams: EmailTemplate = {
      to_email: secretaryEmail,
      to_name: secretaryName,
      from_name: '√âquipe Fadju',
      subject: 'Mise √† jour de votre demande d\'inscription',
      message: `
Bonjour ${secretaryName},

Nous avons examin√© votre demande d'inscription pour l'√©tablissement "${etablissementName}".

‚ùå Statut : Demande non valid√©e
üë§ Examin√© par : ${adminName}
üìÖ Date d'examen : ${new Date().toLocaleDateString('fr-FR', { 
  weekday: 'long', 
  year: 'numeric', 
  month: 'long', 
  day: 'numeric' 
})}

üìù Motif du refus :
${rejectionReason}

üîÑ Que faire maintenant ?
Vous pouvez soumettre une nouvelle demande en corrigeant les points mentionn√©s ci-dessus.

Pour cr√©er une nouvelle demande :
1. Rendez-vous sur : ${window.location.origin}/health-secretary/register
2. Remplissez le formulaire avec les informations correctes
3. Assurez-vous que toutes les informations sont exactes et compl√®tes

üí¨ Besoin d'aide ?
Si vous avez des questions concernant ce refus ou besoin d'√©claircissements, n'h√©sitez pas √† nous contacter.

Nous restons √† votre disposition pour vous accompagner dans votre d√©marche.

Cordialement,
L'√©quipe Fadju
      `.trim(),
      etablissement_name: etablissementName,
      secretary_name: secretaryName,
      validation_status: 'refus√©',
      rejection_reason: rejectionReason,
      superadmin_name: adminName,
      login_url: `${window.location.origin}/health-secretary/register`,
    };

    try {
      await emailjs.send(
        EMAILJS_CONFIG.SERVICE_ID,
        EMAILJS_CONFIG.TEMPLATE_ID,
        templateParams as any
      );
      console.log('Email de refus envoy√© au secr√©taire');
    } catch (error) {
      console.error('Erreur lors de l\'envoi de l\'email de refus:', error);
      throw new Error('Impossible d\'envoyer l\'email de refus');
    }
  }

  /**
   * Notifie le secr√©taire lors de l'inscription (confirmation de r√©ception)
   */
  static async confirmRegistrationToSecretary(params: {
    secretaryEmail: string;
    secretaryName: string;
    etablissementName: string;
  }): Promise<void> {
    const { secretaryEmail, secretaryName, etablissementName } = params;

    const templateParams: EmailTemplate = {
      to_email: secretaryEmail,
      to_name: secretaryName,
      from_name: '√âquipe Fadju',
      subject: 'Confirmation de votre demande d\'inscription',
      message: `
Bonjour ${secretaryName},

Nous avons bien re√ßu votre demande d'inscription pour l'√©tablissement "${etablissementName}".

‚úÖ Demande enregistr√©e avec succ√®s
üìÖ Date de soumission : ${new Date().toLocaleDateString('fr-FR', { 
  weekday: 'long', 
  year: 'numeric', 
  month: 'long', 
  day: 'numeric' 
})}
üîç Statut : En cours d'examen

‚è∞ D√©lai d'examen : 24 √† 48 heures
üìß Vous recevrez un email d√®s que votre demande sera trait√©e

Pendant l'attente :
‚Ä¢ Votre compte est cr√©√© et vous pouvez vous connecter
‚Ä¢ L'acc√®s aux fonctionnalit√©s sera d√©bloqu√© apr√®s validation
‚Ä¢ Vous pouvez consulter le statut dans votre dashboard

Acc√©der √† votre dashboard : ${window.location.origin}/secretaire/dashboard

Notre √©quipe examine chaque demande avec attention pour garantir la qualit√© de notre r√©seau d'√©tablissements de sant√©.

Merci de votre confiance !

L'√©quipe Fadju
      `.trim(),
      etablissement_name: etablissementName,
      secretary_name: secretaryName,
      dashboard_url: `${window.location.origin}/secretaire/dashboard`,
    };

    try {
      await emailjs.send(
        EMAILJS_CONFIG.SERVICE_ID,
        EMAILJS_CONFIG.TEMPLATE_ID,
        templateParams as any
      );
      console.log('Email de confirmation d\'inscription envoy√©');
    } catch (error) {
      console.error('Erreur lors de l\'envoi de l\'email de confirmation:', error);
      // Ne pas faire √©chouer l'inscription si l'email √©choue
    }
  }

  /**
   * V√©rifie si EmailJS est correctement configur√©
   */
  static isConfigured(): boolean {
    return (
      EMAILJS_CONFIG.SERVICE_ID !== 'your_service_id' &&
      EMAILJS_CONFIG.TEMPLATE_ID !== 'your_template_id' &&
      EMAILJS_CONFIG.PUBLIC_KEY !== 'your_public_key'
    );
  }

  /**
   * Test de configuration EmailJS
   */
  static async testConfiguration(): Promise<boolean> {
    if (!this.isConfigured()) {
      console.warn('EmailJS non configur√©');
      return false;
    }

    try {
      const testParams: EmailTemplate = {
        to_email: 'test@example.com',
        to_name: 'Test',
        from_name: 'Test Fadju',
        subject: 'Test de configuration',
        message: 'Ceci est un test de configuration EmailJS.',
      };

      await emailjs.send(
        EMAILJS_CONFIG.SERVICE_ID,
        EMAILJS_CONFIG.TEMPLATE_ID,
        testParams as any
      );
      return true;
    } catch (error) {
      console.error('Test EmailJS √©chou√©:', error);
      return false;
    }
  }
}