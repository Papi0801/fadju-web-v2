#!/usr/bin/env node

/**
 * Script pour migrer les donn√©es patients existantes vers le syst√®me d'affiliation
 * et cr√©er des donn√©es de test
 */

const { initializeApp } = require('firebase/app');
const { 
  getFirestore, 
  collection, 
  getDocs, 
  doc, 
  updateDoc, 
  addDoc,
  query,
  where,
  serverTimestamp 
} = require('firebase/firestore');

const firebaseConfig = {
  apiKey: "AIzaSyC8ZOg2KGjcmMvLUoJgv6C9EJCgmOxNfzI",
  authDomain: "fadju-sante.firebaseapp.com",
  projectId: "fadju-sante",
  storageBucket: "fadju-sante.appspot.com",
  messagingSenderId: "446038742053",
  appId: "1:446038742053:web:ba0b8f789423659da98b36"
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function migratePatientAffiliations() {
  console.log('üîÑ MIGRATION DES AFFILIATIONS PATIENTS');
  console.log('=====================================\n');

  try {
    // 1. R√©cup√©rer tous les patients existants
    console.log('üìã R√©cup√©ration des patients existants...');
    const patientsQuery = query(
      collection(db, 'dossier_patient'),
      where('actif', '==', true)
    );
    
    const patientsSnapshot = await getDocs(patientsQuery);
    console.log(`   ‚úì ${patientsSnapshot.docs.length} patients trouv√©s`);

    if (patientsSnapshot.docs.length === 0) {
      console.log('‚ö†Ô∏è  Aucun patient existant trouv√©. Cr√©ation de donn√©es de test...\n');
      await createTestPatients();
      return;
    }

    // 2. R√©cup√©rer les √©tablissements pour affiliation par d√©faut
    console.log('üè• R√©cup√©ration des √©tablissements...');
    const etablissementsSnapshot = await getDocs(collection(db, 'etablissements_sante'));
    
    if (etablissementsSnapshot.docs.length === 0) {
      console.log('‚ùå Aucun √©tablissement trouv√©. Impossible de migrer.');
      return;
    }

    const etablissements = etablissementsSnapshot.docs.map(doc => ({
      id: doc.id,
      nom: doc.data().nom
    }));
    
    console.log(`   ‚úì ${etablissements.length} √©tablissements trouv√©s:`);
    etablissements.forEach(etab => {
      console.log(`     - ${etab.nom} (${etab.id})`);
    });

    // 3. Migrer chaque patient
    console.log('\nüîÑ Migration des patients...');
    let migratedCount = 0;
    let skippedCount = 0;

    for (const patientDoc of patientsSnapshot.docs) {
      const patientData = patientDoc.data();
      const patientId = patientDoc.id;

      // V√©rifier si le patient a d√©j√† des affiliations
      if (patientData.etablissements_affilies && Array.isArray(patientData.etablissements_affilies)) {
        console.log(`   ‚è≠Ô∏è  Patient ${patientData.prenom} ${patientData.nom} d√©j√† migr√©`);
        skippedCount++;
        continue;
      }

      // Affecter le patient au premier √©tablissement par d√©faut
      const etablissementDefaut = etablissements[0];
      
      await updateDoc(doc(db, 'dossier_patient', patientId), {
        etablissements_affilies: [etablissementDefaut.id],
        date_modification: serverTimestamp()
      });

      console.log(`   ‚úì Patient ${patientData.prenom} ${patientData.nom} affili√© √† ${etablissementDefaut.nom}`);
      migratedCount++;
    }

    console.log(`\n‚úÖ Migration termin√©e:`);
    console.log(`   ‚Ä¢ ${migratedCount} patients migr√©s`);
    console.log(`   ‚Ä¢ ${skippedCount} patients d√©j√† migr√©s`);

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
  }
}

async function createTestPatients() {
  try {
    // R√©cup√©rer un √©tablissement pour les tests
    const etablissementsSnapshot = await getDocs(collection(db, 'etablissements_sante'));
    
    if (etablissementsSnapshot.docs.length === 0) {
      console.log('‚ùå Aucun √©tablissement disponible pour cr√©er des patients de test');
      return;
    }

    const etablissement = etablissementsSnapshot.docs[0];
    const etablissementId = etablissement.id;
    const etablissementNom = etablissement.data().nom;

    console.log(`üè• Utilisation de l'√©tablissement: ${etablissementNom} (${etablissementId})`);

    const testPatients = [
      {
        patient_id: 'test_patient_001',
        prenom: 'Aminata',
        nom: 'Diallo',
        email: 'aminata.diallo@email.sn',
        telephone: '+221 77 123 45 67',
        adresse: 'Dakar, Plateau, Rue 15 x Rue 20',
        date_naissance: new Date('1990-05-15'),
        genre: 'Femme',
        allergie: 'P√©nicilline',
        maladie_chronique: 'Hypertension art√©rielle',
        groupe_sanguin: 'A+',
        poids: 65,
        taille: 165,
        etablissements_affilies: [etablissementId],
        actif: true
      },
      {
        patient_id: 'test_patient_002',
        prenom: 'Mamadou',
        nom: 'Sow',
        email: 'mamadou.sow@email.sn',
        telephone: '+221 77 987 65 43',
        adresse: 'Dakar, Sacr√©-Coeur, Villa 123',
        date_naissance: new Date('1985-11-20'),
        genre: 'Homme',
        allergie: null,
        maladie_chronique: 'Diab√®te type 2',
        groupe_sanguin: 'O+',
        poids: 78,
        taille: 175,
        etablissements_affilies: [etablissementId],
        actif: true
      },
      {
        patient_id: 'test_patient_003',
        prenom: 'Fatou',
        nom: 'Ndiaye',
        email: 'fatou.ndiaye@email.sn',
        telephone: '+221 78 555 44 33',
        adresse: 'Dakar, Mermoz, Cit√© Biagui',
        date_naissance: new Date('1992-08-10'),
        genre: 'Femme',
        allergie: 'Aspirine',
        maladie_chronique: null,
        groupe_sanguin: 'B+',
        poids: 58,
        taille: 160,
        etablissements_affilies: [etablissementId],
        actif: true
      }
    ];

    console.log('üë• Cr√©ation des patients de test...');
    for (const patient of testPatients) {
      // V√©rifier si le patient existe d√©j√†
      const existingQuery = query(
        collection(db, 'dossier_patient'),
        where('patient_id', '==', patient.patient_id)
      );
      const existingSnapshot = await getDocs(existingQuery);

      if (existingSnapshot.docs.length > 0) {
        console.log(`   ‚è≠Ô∏è  Patient ${patient.prenom} ${patient.nom} existe d√©j√†`);
        continue;
      }

      await addDoc(collection(db, 'dossier_patient'), {
        ...patient,
        date_creation: serverTimestamp(),
        date_modification: serverTimestamp()
      });

      console.log(`   ‚úì Patient ${patient.prenom} ${patient.nom} cr√©√© et affili√©`);
    }

    console.log('\n‚úÖ Patients de test cr√©√©s avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des patients de test:', error);
  }
}

// Mode d'ex√©cution
const mode = process.argv[2] || 'migrate';

if (mode === 'test') {
  createTestPatients();
} else if (mode === 'migrate') {
  migratePatientAffiliations();
} else {
  console.log('Usage:');
  console.log('  node migrate-patient-affiliations.js migrate  # Migrer les donn√©es existantes');
  console.log('  node migrate-patient-affiliations.js test     # Cr√©er des patients de test');
}